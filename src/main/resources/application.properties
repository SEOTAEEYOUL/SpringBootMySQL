server.port=8080
# application.name=spring-demo

# MySQL

# logging.level.org.springframework.jdbc.core=DEBUG

# spring.datasource.url=jdbc:mysql://mysql-skcc7-homepage.mysql.database.azure.com:3306/tutorial
# spring.datasource.url=jdbc:mysql://rds-homepage-dev.cluster-ciwtbght62jx.ap-northeast-2.rds.amazonaws.com:3306/tutorial
# spring.datasource.url=jdbc:mysql://mysql-homepage.mysql.database.azure.com:3306/tutorial?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
# spring.datasource.url=jdbc:mysql://localhost:3306/tutorial?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
# spring.datasource.username=tutorial
# spring.datasource.username=tutorial@mysql-skcc7-homepage
# spring.datasource.password=tutorial

# aurora mysql - mariadb jdbc driver
# spring.datasource.url=jdbc:mariadb:aurora//aurora-cluster-dtlv3-t7-v1-prd-an2-mysql.cluster-cu37xjbblrns.ap-northeast-2.rds.amazonaws.com:3306/tutorial

# MySQL 연결 설정
# 이전 버전 : com.mysql.jdbc.Driver
# 신   버전 : com.mysql.cj.jdbc.Driver
# AWS : software.aws.rds.jdbc.mysql.Driver
#       connect/j 3.0.3 부터 중단
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# spring.datasource.driver-class-name=com.mysql.jdbc.Driver - 옛날 버전
# spring.datasource.url=jdbc:mysql://aurora-instance-skcc-07456-p-an2-0.cgxth7zggvw1.ap-northeast-2.rds.amazonaws.com:3306/tutorial?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.driver-class-name=software.aws.rds.jdbc.mysql.Driver
spring.datasource.url=jdbc:mysql:aws://rds-skcc-07456-p-aurora-mysql.cluster-cgxth7zggvw1.ap-northeast-2.rds.amazonaws.com:3306/tutorial?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=tutorial
spring.datasource.password=tutorial
spring.datasource.autoReconnect=true
spring.datasource.validationQuery=select 1


# spring.datasource.initialization-mode=always

# JSP
# JSP 수정시 서버 재시작없이 바로 적용될 수 있게 설정(개발, 테스트 용)
# server.servlet.jsp.init-parameters.development=true
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
devtools.livereload.enabled=true

spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
# spring.mvc.view.suffix=.do

# -----------------------------------------------------------------------------
# access log
# -----------------------------------------------------------------------------
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# logging.level.root=INFO
# logging.level.root=DEBUG
# # 로그를 사용하겠다고 지정
server.tomcat.accesslog.enabled=true
# # spring boot가 실행되는 디렉토리를 기본 디렉토리로 설정
# server.tomcat.basedir=.
# # 앞서 지정한 base디렉토리 아래 ./logs 디렉토리에 로그 디렉토리 설정
# # server.tomcat.accesslog.directory=logs
# # server.tomcat.accesslog.suffix=.log
# # server.tomcat.accesslog.prefix=access_log
# # server.tomcat.accesslog.file-date-format=.yyyy-MM-dd
# server.tomcat.accesslog.buffered=false
# server.tomcat.accesslog.suffix=
# server.tomcat.accesslog.prefix=
# server.tomcat.accesslog.file-date-format=
# # 일반적인 access log 포맷 적용시
# # server.tomcat.accesslog.pattern=common
# # server.tomcat.accesslog.pattern="[ACCESS]%{yyyy-MM-dd HH:mm:ss}t %s %r %{User-Agent}i %{Referer}i %a %b %D vcap_request_id:%{X-Vcap-Request-Id}i"
server.tomcat.accesslog.pattern=[ACCESS] %{org.apache.catalina.AccessLog.RemoteAddr}r %l %t %D %F %B %S vcap_request_id:%{X-Vcap-Request-Id}i
# # %h – 요청을 보낸 클라이언트 IP
# # %l – 사용자 식별 정보
# # %u – HTTP 인증에 의해 지정된 사용자 이름
# # %t – 요청 시간
# # %r – 사용자 요청 URL
# # %s – HTTP 응답 코드
# # %b – 응답 사이즈

# 콘솔 창에 출력되는 로깅 메세지를 색으로 구분해서 출력
spring.output.ansi.enabled=always
# 로그 메세지가 저장되는 로그 디렉터리
# logging.file.path=logs
# logging.level.{패키지 경로}를 통해 로깅 레벨을 결정할 수 있슴

# 프로필 설정
logging.level.gil.toy.medihealth=trace
spring.profiles.active=local
logback-local.properties=console-logging

# -----------------------------------------------------------------------------
# actuator
# -----------------------------------------------------------------------------
# 주요 웹 엔드포인트 구성
management.server.port=
management.server.servlet.context-path=

management.endpoints.jmx.exposure.include=health,info,httptrace
# management.endpoint.web.exposure.exclude=
management.endpoint.web.base-path=/actuator
# management.endpoint.web.path-mapping=

# 모든 Actuator 웹 엔드포인트 노출 구성
# health 상세 조회 옵션 : *never|when-authorized|always
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=env,beans

# 모든 엔드포인트들을 전체 활성화시키거나 비활성화. 비어 있으면 각 엔드포인트 활성화 설정에 위임
management.endpoints.enabled-by-default=true

management.endpoint.beans.enabled=true
management.endpoint.conditions.enabled=true
management.endpoint.configprops.enabled=true
management.endpoint.env.enabled=true
management.endpoint.health.enabled=true
management.endpoint.logfile.enabled=true
management.endpoint.loggers.enabled=true
management.endpoint.mappings.enabled=true
management.endpoint.prometheus.enabled=true
# shutdown 엔드포인트는 기본이 비활성화
management.endpoint.shutdown.enabled=false

# /actuator 페이지를 통해 노출할 endpoint(prometheus) 설정
management.endpoint.web.exposure.include=prometheus

info.project.version=@project.version@
info.java.version=@java.version@
info.spring.framework.version=@spring-framework.version@
info.spring.data.version=@spring-data-bom.version@