def pod_label="jenkins-slave-${UUID.randomUUID().toString()}"


def image_server="harbor.skmta.net"
def service_account="jenkins"
def docker_id="Harbor"
def cicd_namespace="mta-infra"
def cicd_pvc="cicd-workspace"
def namespace="mta-dev"

def app="spring-mongodb"
def version="0.7.5"


// JDK 8 사용하도록 설정하기
// def javaHome="tool name: 'jdk8', type: 'hudson.model.JDK'"
// env.JAVA_HOME="${javaHome}"
// env.PATH="${env.PATH}:${env.JAVA_HOME}/bin"

def mvnHome


podTemplate(
  label:pod_label, serviceAccount: "${service_account}", namespace: "${cicd_namespace}",
  containers: [
    containerTemplate(name: 'tree', image: 'iankoulski/tree', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'maven',  image: "maven:3.5.2-jdk-8-alpine", ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'node', image: 'node:8.16.2-alpine3.10', command: 'cat', ttyEnabled: true),
    // containerTemplate(name: 'golang', image: 'golang:1.8.0', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'docker', image: "docker:19.03", ttyEnabled: true, command: 'cat')
  ],
  volumes: [
    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')
    // hostPathVolume(hostPath: '/var/lib/docker', mountPath: '/var/lib/docker'),
    // hostPathVolume(hostPath: '/etc/hosts', mountPath: '/etc/hosts')
  ],
  workspaceVolume: persistentVolumeClaimWorkspaceVolume(claimName: "${cicd_pvc}", readOnly: false)
)
{
  node(pod_label) {
    // JDK 8 사용하도록 설정하기
    // stage('Setting') {
    //   def javaHome = tool name: 'jdk8', type: 'hudson.model.JDK'
    //   env.JAVA_HOME = "${javaHome}"
    //   env.PATH = "${env.PATH}:${env.JAVA_HOME}/bin"
    // }

    stage('Preparation') { // for display purposes
      echo "Current workspace : ${workspace}"
      sh "ls  -lt jmx_prometheus*"
      sh "ls -lt target/*.war"

      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.
      // mvnHome = tool 'M3'
    }

    stage('Checkout') {
      // Get some code from a Git repository
      sh "rm -f /home/jenkins/agent/workspace/${app}/.git/index.lock"
      checkout scm
      slackSend(channel: "mta", color: '#0000FF', message: "Checkout - SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
      container('tree') {
        // sh 'env'
        sh 'tree'
        // sh 'test -f old-evn.txt && cat old-env.txt'
        // sh 'env > old-env.txt'
      }
    }

    stage('Build Maven Project') {
      container('maven') {
        try {
          // withMaven(maven: "maven-3", globalMavenSettingsConfig: "${MAVEN_SETTINGS}") {
          // withMaven( ) {
          sh "mvn -B clean package"
          sh "ls -lt target/*.war"
          //   sh 'mvn --settings settings.xml -e -U clean package -DskipTests=true -DfinalName=app -Ddockerfile.skip'
          // }

          // send slack notification
          slackSend(channel: "mta", color: '#0000FF', message: "Maven Build - SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})") 
        }
        catch (Exception e) {
          // mark build as failed
          currentBuild.result = "FAILURE";
          // send slack notification
          slackSend (color: '#FF0000', message: "Maven Build - FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
          // throw the error
          echo e.toString( )
          throw e
        }
      }
    }

    stage('Build Docker Image') {
      container('docker') {
        sh "docker build --rm=true --network=host --tag ${app}:${version} ."
        sh "docker tag ${app}:${version} ${image_server}/${namespace}/${app}:${version}"
        slackSend(channel: "mta", color: '#0000FF', message: "Docker Build - SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
      }
    }

    stage('Push Docker Image') {
      container('docker') {
        try {
          withDockerRegistry([credentialsId: "${docker_id}", url: "http://${image_server}"]) {
            // sh "docker push ${image_server}/${namespace}/${app}:${version}"
            docker.image("${image_server}/${namespace}/${app}:${version}").push( )
          }
          // send slack notification
          slackSend(channel: "mta", color: '#0000FF', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
        catch (Exception e) {
          // mark build as failed
          currentBuild.result = "FAILURE";
          // send slack notification
          slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
          // throw the error
          echo e.toString( )
          throw e
        }
      }
    } // stage

  } // node
} // podTemplate
