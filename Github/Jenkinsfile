def label = "springmysql-${UUID.randomUUID().toString()}"

pipeline {
    agent any
    

        
    stages {
        stage('github-clone') {
            steps {
                git branch: 'main', credentialsId: 'github-token', url: 'https://github.com/SEOTAEEYOUL/SpringBootMySQL'
            }
        }
        // stage("checkout"){
        //     steps{
        //         checkout scm
        //     }
        // }
        stage("Delete container and image"){
            steps{
                sh "docker rm -f springmysql "
                sh "docker rmi springmysql" 
            }
        }
        stage("image build"){
            steps{
                script {
                    myapp = docker.build("springmysql:1.0.0")
                }
            }
        }
        // stage("push image"){
        //     steps{
        //         script{
        //             docker.withRegistry('https://myregistry.com','registry-auth'){
        //                 myapp.push("latest")
        //             }
        //         }
        //     }
        // }
        stage("deploy springmysql"){
            steps{
                sh "docker run --name webserver --net demonet -d --name -p 18080:8080 springmysql"
            }
        }
    }
}

// pipeline{
//     agent any
//     stages{
//         stage("checkout"){
//             steps{
//                 checkout scm
//             }
//         }
//         stage("Delete container and image"){
//             steps{
//                 sh "docker rm -f webserver "
//                 sh "docker rmi myregistry.com/root/webtest/webserver" 
//             }
//         }
//         stage("image build"){
//             steps{
//                 script{
//                     myapp = docker.build("myregistry.com/root/webtest/webserver")
//                 }
//             }
//         }
//         stage("push image"){
//             steps{
//                 script{
//                     docker.withRegistry('https://myregistry.com','registry-auth'){
//                         myapp.push("latest")
//                     }
//                 }
//             }
//         }
//         stage("deploy Webserver"){
//             steps{
//                 sh "docker run --name webserver --net demonet -d --name -p 1888:80 myregistry.com/root/webtest/webserver"
//             }
//         }
//     }
// }