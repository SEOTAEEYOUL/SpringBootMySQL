# Default values for springmysql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: taeeyoul/springmysql
  pullPolicy: Always # IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2.1.0"

aws:
  region: "ap-northeast-2"
  eks:
    clusterName: "skcc-07456-p-is-tf-01"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""


initContainer:
  enabled: true
  initData:
    image: "taeeyoul/gitmysql:0.1.0"
    imagePullPolicy: Always
    script: |
      LANG="C.UTF-8"; export LANG
      mkdir -p /data/tmp      
      cd /data/tmp
      if [ -d /data/book ]
      then
        rm -rf /data/book
      fi
      if [ -d /data/book ]
      then
        echo "Already Initialized - Cancle git clone"
        pwd
      else
        echo "0. rm -rf ./item"      
        pwd     
        rm -rf ./item
        echo "   git clone https://github.com/SEOTAEEYOUL/item.git"
        git clone https://github.com/SEOTAEEYOUL/item.git
        echo "1. ls -l"
        ls -l
        echo "2. ls -l ./item/book"
        ls -l ./item/book
        
        echo "3. rm -f /data/book"
        rm -f /data/book

        cat ./item/book/tutorial_book.sql

        echo "4. cp -rf ./item/book /data/book"
        cp -rf ./item/book /data/book

        echo "5. ls -l /data/book"
        ls -l /data/book
      fi

      if [ -d /data/book ] && [ -f /data/book/load_result.txt ]
      then
        echo "--- Already Initialized - Cancle - Load MySQL Data"
        ls -l /data/book/load_result.txt
      else
        echo "6. cd /data/book"
        cd /data/book
        echo "7. pwd"
        pwd
        echo "8. ls -l"
        ls -l 
        echo "9. cat tutorial_book.sql, cat load_data.py"
        echo "# MySQL에 데이터 로딩"
        echo "---"
        cat tutorial_book.sql
        echo "---"
        cat load_data.py
        echo "---"
        echo "10. python3 load_data.py(-h $DB_SERVER -P $DB_PORT -u $DB_USERNAME -p $DB_PASSWORD -D $DATABASE).py > load_result.txt"
        python3 load_data.py > load_result.txt
        echo "11. ls -l /data/book/load_result.txt"
        ls -l /data/book/load_result.txt
        echo "12. cat /data/book/load_result.txt"
        cat /data/book/load_result.txt
      fi


persistent:
  use: true
  pvc: "efs-sc-pvc"
  mountPath: "/data"

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

targetGroupBinding:
  enabled: true
  from:
    securityGroup: "sg-0acf653f2f319c819" # sgrp-eks-front-alb
  ports:
    port: http
    protocol: TCP
  targetGroupARN: "arn:aws:elasticloadbalancing:ap-northeast-2:592806604814:targetgroup/tg-tf-p-80-alb-k8s-cluster-1/9ca03d31cd429ad4"
  targetType: ip

ingress:
  enabled: false # -> ALBC 를 사용하는 것이 아닌 TargetGroupBinding 을 수동으로 할 경우
  className: "alb"
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip 
    alb.ingress.kubernetes.io/group.name: app
  hosts:
    - host: springaurora.paas-cloud.org
      paths:
        - path: /
          # pathType: ImplementationSpecific
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: # {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70 # 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: # {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: role
  #         operator: In
  #         values:
  #         - worker
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - springmysql
        topologyKey: failure-domain.beta.kubernetes.io/zone
      weight: 100

secret:
  enabled: true
  name: "aurora-mysql-secret"
  string: "dHV0b3JpYWwNCg==" # tutorial
  # string: "ZGxhdGwhMDANCg=="

db:
  # user: "admin"
  user: "tutorial"
  database: "tutorial"
  password: "aurora-mysql-secret"
  driver: "software.aws.rds.jdbc.mysql.Driver"
  # driver: "com.mysql.cj.jdbc.Driver"
  # driver: "com.mysql.cj.jdbc.Driver"
  server: "rds-skcc-07456-p-aurora-mysql.cluster-cgxth7zggvw1.ap-northeast-2.rds.amazonaws.com"
  port: "3306"
  jdbc_url: "jdbc:mysql:aws://rds-skcc-07456-p-aurora-mysql.cluster-cgxth7zggvw1.ap-northeast-2.rds.amazonaws.com:3306/tutorial?serverTimezone=UTC&characterEncoding=UTF-8"
  # connection: "jdbc:mysql://rds-skcc-07456-p-aurora-mysql.cluster-cgxth7zggvw1.ap-northeast-2.rds.amazonaws.com:3306/tutorial?serverTimezone=UTC&characterEncoding=UTF-8"
  timezone: "Asia/Seoul"
    